#!/usr/bin/env -S python3 -OO
# coding:utf8

# Copyright (c) 2022, Patrowl and contributors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.  Redistributions in binary
# form must reproduce the above copyright notice, this list of conditions and
# the following disclaimer in the documentation and/or other materials provided
# with the distribution
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from datetime import date
import requests
from patrowl.exceptions import PatrowlException


def get_pentests(self, org_id: int = None, page: int = 1, limit: int = 10):
    """
    Get all pentests.

    :param org_id: Organization ID
    :type org_id: int|str
    :param page: Page number of results (Opt.)
    :type page: int
    :param limit: Max results per page. Default is 10, Max is 100 (Opt.)
    :type limit: int
    :rtype: json
    """
    url_params = f'?format=json&page={str(page)}&limit={str(limit)}'
    if org_id is not None and str(org_id).isnumeric():
        url_params += f'&org={str(org_id)}'

    try:
        r = self.rs.get(self.url+"/api/auth/pentests/{}".format(url_params))
        return r.text
    except requests.exceptions.RequestException as e:
        raise PatrowlException("Unable to list pentests: {}".format(e))


def get_pentest(self, pentest_id: int):
    """
    Get pentest details.

    :param pentest_id: Pentest ID
    :type pentest_id: int
    :return: Pentest details
    :rtype: json
    """
    try:
        r = self.rs.get(self.url+f"/api/auth/pentests/{str(pentest_id)}/?format=json")
        return r.text
    except requests.exceptions.RequestException as e:
        raise PatrowlException("Unable to retrieve pentest: {}".format(e))


def get_pentest_assets(self, pentest_id: int):
    """
    Get assets related to a pentest.

    :param pentest_id: Pentest ID
    :type pentest_id: int
    :return: Assets related to a pentest
    :rtype: json
    """
    try:
        r = self.rs.get(self.url+f"/api/auth/assets/?format=json&pentest={str(pentest_id)}")
        return r.text
    except requests.exceptions.RequestException as e:
        raise PatrowlException("Unable to retrieve assets from pentest: {}".format(e))


def get_pentest_vulns(self, pentest_id: int):
    """
    Get vulnerabilities related to a pentest.

    :param pentest_id: Pentest ID
    :type pentest_id: int
    :return: Vulnerabilities related to a pentest
    :rtype: json
    """
    try:
        r = self.rs.get(self.url+f"/api/auth/vulns/?format=json&pentest={str(pentest_id)}")
        return r.text
    except requests.exceptions.RequestException as e:
        raise PatrowlException("Unable to retrieve vulns from pentest: {}".format(e))


def create_pentest(
        self, requested_by: int, provider: str, title: str,
        organization_id: int,
        description: str = "", comments: str = "",
        date_from: date = None, date_to: date = None):
    """
    Create a new pentest.

    :param requested_by: User ID
    :type requested_by: int|str
    :param provider: service provider name
    :type provider: str
    :param title: Title
    :type title: str
    :param organization_id: Organizatin ID
    :type organization_id: int|str
    :param description: Description
    :type description: int|str
    :param comments: Comments
    :type comments: str
    :param date_from: Starting date
    :type date_from: datetime
    :param date_to: Ending date
    :type date_to: datetime
    :return: Pentest details
    :rtype: json
    """
    data = {
        'requested_by': requested_by,
        'provider': provider,
        'title': title,
        'organization': organization_id,
        'description': description,
        'comments': comments,
        'date_from': date_from,
        'date_to': date_to
    }
    try:
        r = self.rs.post(self.url+"/api/auth/pentests/?format=json", json=data)
        return r.text
    except requests.exceptions.RequestException as e:
        raise PatrowlException("Unable to create pentest: {}".format(e))


def delete_pentest(self, pentest_id: int):
    """
    Delete pentest details.

    :param pentest_id: Pentest ID
    :type pentest_id: int
    :rtype: json
    """
    try:
        r = self.rs.delete(self.url+f"/api/auth/pentests/{str(pentest_id)}/?format=json")
        return r.text
    except requests.exceptions.RequestException as e:
        raise PatrowlException("Unable to delete pentest: {}".format(e))
